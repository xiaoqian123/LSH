package pHash;

public class LSH {
	static int [][]hashfuns={{6,18,3,41,14,46,29,42,27,24,2,47,38,21,39,23,16,17,35,4,25,11,37,8,10,31,48,34,28,43,19,45,15,1,32,7,9,12,22,26,13,5,44,20,30,40,33,49,36},
					         {45,22,6,16,43,25,15,7,26,8,17,2,12,1,48,31,49,40,42,30,20,13,3,5,9,32,14,11,10,18,34,39,4,44,21,23,47,29,46,36,28,33,35,27,41,38,24,19,37},
					         {49,6,3,45,30,36,1,7,13,34,2,22,44,29,5,9,10,14,20,16,40,46,24,27,35,48,21,19,28,31,41,8,4,12,37,18,47,15,38,32,23,17,11,42,33,43,25,39,26},
					         {19,39,32,1,13,3,25,47,49,16,22,41,8,29,40,24,26,18,36,17,44,45,6,12,9,31,33,20,27,48,5,43,23,7,15,28,46,34,10,21,14,42,2,37,30,35,38,11,4},
					         {45,34,46,30,43,48,32,49,44,11,31,47,8,36,25,5,2,10,6,29,27,28,14,9,23,17,1,12,22,18,19,3,24,40,35,7,33,42,13,41,15,37,21,26,39,38,20,16,4},
					         {11,34,31,46,37,30,42,16,48,28,2,47,36,26,14,8,13,23,39,29,22,19,6,4,10,3,20,21,41,12,18,45,27,17,9,1,38,44,5,40,32,24,15,7,33,49,25,35,43},
					         {46,30,39,25,8,26,27,16,11,34,12,22,40,33,43,48,37,10,36,18,9,42,32,14,1,23,20,4,15,3,17,45,41,47,29,31,6,35,38,2,5,19,44,49,28,13,24,21,7},
					         {10,49,2,35,4,43,33,17,25,41,9,12,23,20,19,27,28,34,5,11,32,3,37,26,31,1,8,45,39,48,40,18,7,42,16,30,29,22,24,13,14,38,36,21,44,47,46,6,15},
					         {29,23,24,28,12,3,20,27,10,34,39,11,13,8,25,6,37,40,41,43,33,1,14,36,47,38,4,15,26,31,2,18,30,44,7,45,42,32,46,9,17,16,22,5,49,21,48,19,35},
					         {15,49,16,25,36,2,20,10,7,44,21,35,23,5,4,34,31,40,48,47,32,14,6,41,28,30,12,1,46,26,9,8,42,18,17,24,29,39,37,3,38,19,11,13,22,27,45,43,33},
					         {34,33,43,8,25,22,45,38,48,10,16,47,32,9,29,30,19,5,20,46,28,49,2,4,26,11,27,1,41,35,24,42,39,12,18,44,13,31,3,36,23,40,15,7,37,21,14,6,17},
					         {10,40,5,6,12,3,20,25,1,24,23,2,16,37,22,15,8,31,41,26,43,35,45,9,38,27,49,36,44,21,13,34,30,48,32,33,39,19,11,47,18,28,46,17,42,14,7,4,29},
					         {37,2,44,35,40,47,3,36,33,23,21,27,24,10,12,43,7,16,25,19,9,42,4,29,41,38,26,6,31,14,30,46,22,45,34,17,13,8,1,18,20,28,48,32,49,39,11,5,15},
					         {19,42,10,18,48,34,7,25,24,22,49,36,46,4,33,15,28,20,43,32,35,6,40,11,21,37,2,45,9,17,8,29,12,1,14,38,27,3,23,41,30,5,39,13,44,26,31,16,47},
					         {23,1,2,29,4,32,45,3,26,33,15,27,12,19,49,39,44,11,36,30,41,14,38,43,7,24,47,28,9,5,16,13,18,48,17,10,21,20,31,8,42,34,6,40,46,22,37,25,35},
					         {48,1,29,27,22,39,37,24,18,34,20,11,15,44,8,17,47,6,42,31,32,36,5,9,33,41,7,45,35,23,49,3,4,25,19,21,40,16,13,38,12,30,43,14,2,10,28,46,26},
					         {26,42,25,44,13,31,37,45,30,2,6,24,3,4,20,5,9,48,46,40,27,29,8,18,41,33,19,38,14,34,21,15,39,36,22,7,10,23,35,16,32,1,43,12,11,49,28,47,17},
					         {5,25,15,21,8,7,9,40,30,29,16,43,42,35,23,48,13,2,32,37,6,24,20,36,10,4,39,26,41,47,45,19,38,22,49,44,1,3,33,14,27,34,46,12,31,28,18,11,17},
					         {46,35,42,5,38,15,44,45,11,31,17,4,1,28,29,23,22,25,41,49,16,48,6,18,37,47,39,2,9,10,27,33,34,32,21,7,40,3,14,36,26,12,30,20,24,13,43,8,19},
					         {33,8,7,40,4,32,13,22,48,49,19,16,21,30,10,38,35,1,20,18,45,26,5,27,28,23,37,25,41,29,14,31,11,17,47,39,3,6,9,36,34,44,15,42,2,24,12,43,46}
};
	
	static int hash[] ={6,9,4,7};	//普通hash 
	int[] matrix={100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100};	
	static int M=30;//桶的个数
	int Bucketid[]={0,0,0,0,0};	//需要返回的桶号
	int sum=0;		
	String tempmatrix="";
	private void initmatrix()
	{
		for(int i=0;i<hashfuns.length;i++)
		{
			matrix[i]=100;	
		}
		
	}
	private void initBucketid(int b)
	{
		for(int i=0;i<b;i++)
		{
			Bucketid[i]=0;
		}
	}
	/**
	 * 进行minHash
	 * 
	 * @param hashcode 
	 */
	private void  minHash(String hashcode)
	{
		for(int i=0;i<hashcode.length();i++)	
		{
			if(hashcode.charAt(i)=='1')
			{

				for(int z=0;z<matrix.length;z++)
				{
					matrix[z]=Min(matrix[z],hashfuns[z][i]);
				}				
			}	
		}		
	}
	
	private int Min(int a,int b)
	{
		if(a>b)
		{
			return b;
		}else
		{
			return a;
		}		
	}
	/**
	 * 
	 * 行数 r	
	 * 组数 b
	 * @return 对应哈希后的桶号
	 */
	private  void BucketHash(int r,int b)
	{
		  for(int i=0;i<b;i++)
			{
			  for(int j=0;j<r;j++)
			  {
			//	 System.out.println(matrix[i*r+j]+"*"+hash[j]);
				 sum=sum+matrix[i*r+j]*hash[j];
			  }
			  Bucketid[i]=(sum%M)+i*M;
			//  System.out.println("sum="+sum);
			  sum=0;
		    }			
	}

	/**
	 * getBucket()   此函数用于图片上传时
	 * @param hashcode pHash后的数据
	 * @return minHash值
	 */
	
	public String getminHashCode(String hash)
	{
		
		initmatrix();
		tempmatrix="";
		minHash(hash);
		for(int j=0;j<matrix.length;j++)
			tempmatrix=tempmatrix+String.valueOf(matrix[j])+",";
		return tempmatrix;
	}
	/**
	 * 
	 * @return 返回桶号
	 */
	public String  getBucket()
	{
		tempmatrix="";
		int r=4,b=5;
		initBucketid(b);		
		BucketHash(r,b);
		for(int j=0;j<Bucketid.length;j++)
			tempmatrix=tempmatrix+String.valueOf(Bucketid[j])+",";
		return tempmatrix;	
	}


}
